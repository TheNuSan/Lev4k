// Generated with Shader Minifier 1.3.5 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef FRAGMENT_INL_
# define FRAGMENT_INL_

const char *fragment_frag =
 "#version 330\n"
 "#define m1 main\n"
 "uniform int m;"
 "uniform sampler2D sb1;"
 "out vec4 o1;"
 "float v;"
 "vec2 s=vec2(1920,1080);"
 "mat2 e(float v)"
 "{"
   "return mat2(cos(v),sin(v),-sin(v),cos(v));"
 "}"
 "float e(vec3 v,vec3 m)"
 "{"
   "v=abs(v)-m;"
   "return max(v.x,max(v.y,v.z));"
 "}"
 "float n(vec3 m)"
 "{"
   "for(int o=0;o<4;++o)"
     "m.yz*=e(v*.3+o),m.xz*=e(v*.4+o*1.7),m.xy=abs(m.xy)-1.1-sin(v+o);"
   "return e(m,vec3(.1,.4,1));"
 "}"
 "void m1()"
 "{"
   "v=m/44100.;"
   "v*=.1;"
   "vec2 i=(gl_FragCoord.xy-s.xy/2)/s.y;"
   "vec3 o=vec3(0),y=vec3(0,0,-10),c=normalize(vec3(i,1)),f=y;"
   "for(int r=0;r<100;++r)"
     "{"
       "float k=n(f);"
       "if(k<.001)"
         "break;"
       "if(k>100)"
         "break;"
       "f+=c*k;"
     "}"
   "float k=1-clamp(length(f-y)/100,0,1);"
   "o+=clamp(n(f-c),0,1)*k;"
   "o1=vec4(o,1);"
 "}"
 "void m2()"
 "{"
   "v=m/44100.;"
   "vec2 o=gl_FragCoord.xy/s.xy;"
   "vec3 f=vec3(0);"
   "vec2 y=vec2(.005,0);"
   "vec4 i=texture(sb1,o-y),c=texture(sb1,o),d=texture(sb1,o+y);"
   "f+=vec3(i.x/i.w,c.y/c.w,d.z/d.w);"
   "o1=vec4(f,1);"
 "}";

#endif // FRAGMENT_INL_
